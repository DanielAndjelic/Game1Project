#include "SPI.h"
#include "Adafruit_GFX.h"
#include "Adafruit_ILI9340.h"
/*
#if defined(__SAM3X8E__)
    #undef __FlashStringHelper::F(string_literal)
    #define F(string_literal) string_literal
#endif
*/

class CHARACTER
{
  public:
  CHARACTER(int type,int posX,int posY,int cDirection,int room,int health,bool cStaus);
  int health;
  int posX;
  int posY;
  int cDirection;
  int room;
  bool cStatus;
  
  private:
  int _type;
};

CHARACTER::CHARACTER(int type,int _posX,int _posY,int _cDirection,int _room,int _health,bool _cStatus)
{
  _type = type;
  posX = _posX;
  posY = _posY;
  cDirection = _cDirection;
  room = _room;
  health = _health;
  cStatus = _cStatus;
  
}

#define _sclk 52
#define _miso 50
#define _mosi 51
#define _cs 41
#define _dc 40
#define _rst 45

int spacing = 16;
int wMap[3][3][15][15] = {};

int inputPin = 22;
bool dPad[4];

CHARACTER HERO(0,7,7,1,0,3,1);

void printMap(char[][15]);
void createMap(char[][15]);
void placeChar(char[][15],int[][3]);
void placeEnemy(char[][15],int[][3]);
void moveChar(char[][15],char,int[][3]);
void enemyMove(char[][15],int[][3]);
float charDistance(int,int,int[][3]);
int centre[2] = {7, 7};
int origin = 3;

Adafruit_ILI9340 tft = Adafruit_ILI9340(_cs, _dc, _mosi, _sclk, _rst, _miso);

void setup() {

  pinMode(22, INPUT);
  pinMode(23, INPUT);
  pinMode(24, INPUT);
  pinMode(25, INPUT);
  pinMode(26, INPUT);
  digitalWrite(22, HIGH);
  digitalWrite(23, HIGH);
  digitalWrite(24, HIGH);
  digitalWrite(25, HIGH);
  digitalWrite(26, HIGH);
  
  Serial.begin(9600);
  while (!Serial);
  Serial.println("Adafruit 2.2\" SPI TFT Test!");
  tft.begin();
  tft.setRotation(3);
  tft.fillScreen(ILI9340_BLACK);
  initializeMap();
  drawMap();
}

void loop() {
  faceDirection();
  //Inventory
  if(!digitalRead(26)) {
    heroMove();
  }
  //If(attack or move)- Method
  
}

void placeChar() {
   switch(origin) {
      case 0: HERO.posX = 14;
         HERO.posX = 7;
         break;
      case 1: HERO.posX = 7;
         HERO.posY = 1;
         break;
      case 2: HERO.posX = 1;
         HERO.posY = 7;
         break;
      case 3: HERO.posX = 7;
         HERO.posY = 14;
         break;
   }
   wMap[0][0][HERO.posx][HERO.posy] = 2;
   drawHero(HERO.posX,HERO.posY,HERO.cDirection);
}

void heroMove() {
  int newPos[2] = {};
  if(HERO.cDirection == 0) {
    newPos[1] = -1;
  }
  else if(HERO.cDirection == 1) {
    newPos[0] = -1;
  }
  else if(HERO.cDirection == 2) {
    newPos[1] = 1;
  }
  else {
    newPos[0] = 1;
  }
  if(wMap[0][0][HERO.posX + newPos[0]][HERO.posY + newPos[1]] == 0) {
      wMap[0][0][HERO.posX][HERO.posY] = 0;
      wMap[0][0][HERO.posX + newPos[0]][HERO.posY + newPos[1]] = 2;
      HERO.posX = HERO.posX + newPos[0];
      HERO.posY = HERO.posY + newPos[1];
      deleteChunck(HERO.posX,HERO.posY);
      drawHero(HERO.posX,HERO.posY,HERO.cDirection);
  }
}

void enemyMove(int& charX,int& charY, int& charD, int& charType) {
   int row,column;
   int currentI,currentJ;
   float moveDirection[2] = {};
   int moves[2] = {};
   row = charX;
   column = charY;
   if(charDistance(charX, charY) > 8) {
      do {
         if(rand()%2 == 0) {
            row = charX + (rand()%3 - 1);
            column = charY;
         }
         else {
            row = charX;
            column = charY + (rand()%3 - 1);
         }
      }while(wMap[0][0][row][column] == 1);
   }
   else if(charDistance(charX, charY) == 1) {
      //Attack!
   }
   else {
      if((HERO.posX - charX) != 0)
         moveDirection[0] = (HERO.posX - charX)/sqrt(pow((HERO.posX - charX),2));
      if((HERO.posY - charY) != 0)
         moveDirection[1] = (HERO.posY - charY)/sqrt(pow((HERO.posY - charY),2));
      for(int i = 0; i < 2; i++)
         moves[i] = moveDirection[i];
      if(abs(HERO.posY - charX) >= abs(HERO.posY - charY)) {
         if(wMap[0][0][HERO.posX + moves[0]][HERO.posY] == 0 && moves[0] != 0)
            row += moves[0];
         else if(wMap[0][0][HERO.posX][HERO.posY + moves[1]] == 0 && moves[1] != 0)
            column += moves[1];
      }
      else if(moves[0] != 0 || moves[1] != 0) {
         if(wMap[0][0][charX][charY + moves[1]] == 0 && moves[1] != 0)
            column += moves[1];
         else if(wMap[0][0][charX + moves[0]][charY] == 0 && moves[0] != 0)
            row += moves[0];
      }
      if (row == charX && column == charY) {
         if(charX < centre[0] && HERO.posX < centre[0] && wMap[0][0][charX-1][charYtJ] == 0)
            row--;
         else if(charX > centre[0] && HERO.posX > centre[0] && wMap[0][0][charX+1][charY] == 0)
            row++;
         else if(charY < centre[1] && HERO.posY < centre[1] && wMap[0][0][charX][charY-1] == 0)
            column--;
         else if(charY > centre[1] && HERO.posY > centre[1] && wMap[0][0][charX][charY+1] == 0)
            column++;
      }
   }
   deleteChunck(charX, charY);
   wMap[0][0][charX][charY] = 0;
   wMap[0][0][row][column] = 3;
   charX = row;
   charY = column;
   drawEnemy(charX, charY, charD, charType);
   }
}

float charDistance(int charX,int charY) {
   return sqrt(pow((HERO.posx - charX),2) + pow((HERO.posy-charY),2));
}

void faceDirection() {
  for(int i = 0;i<4;i++) {
    dPad[i] = digitalRead(22+i);
    if(!dPad[i] && HERO.cDirection !=i) {
      deleteChunck(HERO.posX,HERO.posY);
      drawHero(HERO.posX,HERO.posY,i);
      HERO.cDirection = i;
    }
  }
}



void deleteChunck(int x,int y) {
  tft.fillRect(x*spacing,y*spacing,16,16,ILI9340_BLACK);
}

void initializeMap() {
  for(int i = 0; i < 15; i++) {
    wMap[0][0][0][i] = 1;
    wMap[0][0][14][i] = 1;
    wMap[0][0][i][0] = 1;
    wMap[0][0][i][14] = 1;
  }
  for(int i = 5; i < 10; i++) {
      wMap[0][0][i][7] = 1;
      wMap[0][0][7][i] = 1;
   }
   wMap[0][0][6][6] = 1;
   wMap[0][0][6][8] = 1;
   wMap[0][0][8][6] = 1;
   wMap[0][0][8][8] = 1;
   wMap[0][0][4][4] = 1;
   wMap[0][0][4][11] = 1;
   wMap[0][0][11][4] = 1;
   wMap[0][0][11][11] = 1;
}

void drawMap() {
  for(int i = 0;i<15;i++) {
    for(int j = 0;j<15;j++) {
      drawTile(i*spacing,j*spacing,wMap[0][0][i][j]);
    }
  }
}

void drawTile(int xPos,int yPos,int tileType) {
  if(tileType == 1) {
    tft.fillRect(xPos,yPos,spacing,spacing,ILI9340_WHITE);
  }
  if(tileType == 4) {
    //draw a door
  }
}

void drawHero(int x,int y,int heroDirection) {
  //Colours, BLACK,BLUE,RED,GREEN,CYAN,MAGENTA,YELLOW,WHITE
  //tft.drawFastVLine(x,y,length, colour)
  //tft.drawFastHLine(x,y,length, colour)
  //tft.drawPixel(x*10,y*10,ILI9340_BLACK)
  //tft.drawRect(x,y,width,height,colour)
  heroDirection%=4;
  //Hero facing left
  if(heroDirection == 0) {
    //Draw Hat
    tft.drawFastHLine(x*spacing+5,y*spacing,11,0x1CB0);
    tft.drawFastHLine(x*spacing+4,y*spacing+1,11,0x1CB0);
    tft.drawFastHLine(x*spacing+3,y*spacing+2,11,0x1CB0);
    tft.drawFastHLine(x*spacing+10,y*spacing+3,4,0x1CB0);
    tft.drawFastHLine(x*spacing+11,y*spacing+4,3,0x1CB0);
    tft.drawFastHLine(x*spacing+12,y*spacing+5,2,0x1CB0);
    //Draw Skin
    tft.drawFastHLine(x*spacing+3,y*spacing+3,7,0xEEEF);
    tft.drawFastVLine(x*spacing+10,y*spacing+4,2,0xEEEF);
    tft.drawFastVLine(x*spacing+3,y*spacing+4,3,0xEEEF);
    tft.fillRect(x*spacing+6,y*spacing+4,2,2,0xEEEF);
    tft.fillRect(x*spacing+4,y*spacing+6,10,2,0xEEEF);
    tft.drawPixel(x*spacing+11,y*spacing+5,0xEEEF);
    tft.fillRect(x*spacing,y*spacing+8,2,2,0xEEEF);
    tft.fillRect(x*spacing+14,y*spacing+10,2,2,0xEEEF);
    //Draw Tunic
    tft.fillRect(x*spacing+2,y*spacing+8,14,2,0x1CB0);
    tft.fillRect(x*spacing+4,y*spacing+12,10,2,0x1CB0);
    //Draw Belt
    tft.fillRect(x*spacing+4,y*spacing+10,10,2,0xDD00);
    tft.fillRect(x*spacing+6,y*spacing+10,2,2,ILI9340_YELLOW);
    
    //Draw Sword
    tft.drawFastHLine(x*spacing,y*spacing+7,2,0xA000);
    tft.fillRect(x*spacing,y*spacing+10,2,2,0xA000);
    tft.fillRect(x*spacing,y*spacing+2,2,7,0xDEDB);
    //Draw Boots
    tft.drawFastHLine(x*spacing+4,y*spacing+14,2,0xA3C0);
    tft.drawFastHLine(x*spacing+3,y*spacing+15,3,0xA3C0);
    tft.drawFastHLine(x*spacing+12,y*spacing+14,2,0xA3C0);
    tft.drawFastHLine(x*spacing+11,y*spacing+15,3,0xA3C0);
  //Hero facing up  
  }
  else if(heroDirection == 1) {
    tft.drawFastHLine(x*spacing+5,y*spacing,6,0x1CB0);
    tft.drawFastHLine(x*spacing+4,y*spacing+1,8,0x1CB0);
    tft.fillRect(x*spacing+3,y*spacing+2,10,4,0x1CB0);
    tft.drawFastHLine(x*spacing+6,y*spacing+6,4,0x1CB0);
    tft.drawFastHLine(x*spacing+7,y*spacing+7,2,0x1CB0);
    //Draw Skin
    tft.drawFastHLine(x*spacing+4,y*spacing+6,2,0xEEEF);
    tft.drawFastHLine(x*spacing+4,y*spacing+7,3,0xEEEF);
    tft.drawFastHLine(x*spacing+10,y*spacing+6,2,0xEEEF);
    tft.drawFastHLine(x*spacing+9,y*spacing+7,3,0xEEEF);
    tft.drawFastVLine(x*spacing+1,y*spacing+9,2,0xEEEF);
    tft.fillRect(x*spacing+12,y*spacing+10,2,2,0xEEEF);
    //Draw Tunic
    tft.fillRect(x*spacing+3,y*spacing+8,11,2,0x1CB0);
    tft.fillRect(x*spacing+2,y*spacing+9,2,2,0x1CB0);
    tft.fillRect(x*spacing+4,y*spacing+12,8,2,0x1CB0);
    //Draw Belt
    tft.fillRect(x*spacing+4,y*spacing+10,8,2,0xDD00);
    //Draw Sword
    tft.drawFastHLine(x*spacing+1,y*spacing+8,2,0xA000);
    tft.fillRect(x*spacing+1,y*spacing+11,2,2,0xA000);
    tft.fillRect(x*spacing+1,y*spacing+1,2,7,0xDEDB);
    //Draw Boots
    tft.fillRect(x*spacing+4,y*spacing+14,2,2,0xA3C0);
    tft.fillRect(x*spacing+10,y*spacing+14,2,2,0xA3C0);
    
  //Hero facing right  
  }
  else if(heroDirection == 2) {
    //Draw Hat
    tft.drawFastHLine(x*spacing,y*spacing,11,0x1CB0);
    tft.drawFastHLine(x*spacing+1,y*spacing+1,11,0x1CB0);
    tft.drawFastHLine(x*spacing+2,y*spacing+2,11,0x1CB0);
    tft.drawFastHLine(x*spacing+2,y*spacing+3,4,0x1CB0);
    tft.drawFastHLine(x*spacing+2,y*spacing+4,3,0x1CB0);
    tft.drawFastHLine(x*spacing+2,y*spacing+5,2,0x1CB0);
    //Draw Skin
    tft.drawFastHLine(x*spacing+6,y*spacing+3,7,0xEEEF);
    tft.drawFastVLine(x*spacing+5,y*spacing+4,4,0xEEEF);
    tft.drawFastVLine(x*spacing+12,y*spacing+4,3,0xEEEF);
    tft.fillRect(x*spacing+8,y*spacing+4,2,2,0xEEEF);
    tft.fillRect(x*spacing+2,y*spacing+6,10,2,0xEEEF);
    tft.drawPixel(x*spacing+4,y*spacing+5,0xEEEF);
    tft.fillRect(x*spacing,y*spacing+10,2,2,0xEEEF);
    tft.fillRect(x*spacing+14,y*spacing+8,2,2,0xEEEF);
    //Draw Tunic
    tft.fillRect(x*spacing,y*spacing+8,14,2,0x1CB0);
    tft.fillRect(x*spacing+2,y*spacing+10,10,1,0x1CB0);
    tft.fillRect(x*spacing+2,y*spacing+12,10,2,0x1CB0);
    //Draw Belt
    tft.fillRect(x*spacing+2,y*spacing+10,10,2,0xDD00);
    tft.fillRect(x*spacing+8,y*spacing+10,2,2,ILI9340_YELLOW);
    //Draw Sword
    tft.drawFastHLine(x*spacing+14,y*spacing+7,2,0xA000);
    tft.fillRect(x*spacing+14,y*spacing+10,2,2,0xA000);
    tft.fillRect(x*spacing+14,y*spacing+2,2,7,0xDEDB);
    //Draw Boots
    tft.drawFastHLine(x*spacing+2,y*spacing+14,2,0xA3C0);
    tft.drawFastHLine(x*spacing+2,y*spacing+15,3,0xA3C0);
    tft.drawFastHLine(x*spacing+10,y*spacing+14,2,0xA3C0);
    tft.drawFastHLine(x*spacing+10,y*spacing+15,3,0xA3C0); 
    
  //Hero facing down  
  }
  else {
    //Draw Hat
    tft.drawFastHLine(x*spacing+5,y*spacing,6,0x1CB0);
    tft.drawFastHLine(x*spacing+4,y*spacing+1,8,0x1CB0);
    tft.drawFastHLine(x*spacing+5,y*spacing+2,6,0x1CB0);
    tft.fillRect(x*spacing+3,y*spacing+2,2,2,0x1CB0);
    tft.fillRect(x*spacing+11,y*spacing+2,2,2,0x1CB0);
    tft.drawFastVLine(x*spacing+3,y*spacing+4,2,0x1CB0);
    tft.drawFastVLine(x*spacing+12,y*spacing+4,2,0x1CB0);
    //Draw Skin
    tft.drawFastHLine(x*spacing+5,y*spacing+3,6,0xEEEF);
    tft.drawFastVLine(x*spacing+4,y*spacing+4,2,0xEEEF);
    tft.drawFastVLine(x*spacing+11,y*spacing+4,2,0xEEEF);
    tft.fillRect(x*spacing+7,y*spacing+4,2,2,0xEEEF);
    tft.fillRect(x*spacing+4,y*spacing+6,8,2,0xEEEF);
    tft.fillRect(x*spacing+2,y*spacing+10,2,2,0xEEEF);
    tft.fillRect(x*spacing+13,y*spacing+9,2,2,0xEEEF);
    //Draw Tunic
    tft.fillRect(x*spacing+2,y*spacing+8,11,2,0x1CB0);
    tft.fillRect(x*spacing+4,y*spacing+12,8,2,0x1CB0);
    //Draw Belt
    tft.fillRect(x*spacing+4,y*spacing+10,8,2,0xDD00);
    tft.fillRect(x*spacing+7,y*spacing+10,2,2,ILI9340_YELLOW);
    
    //Draw Sword
    tft.drawFastHLine(x*spacing+13,y*spacing+8,2,0xA000);
    tft.fillRect(x*spacing+13,y*spacing+11,2,2,0xA000);
    tft.fillRect(x*spacing+13,y*spacing+1,2,7,0xDEDB);
    //Draw Boots
    tft.fillRect(x*spacing+4,y*spacing+14,2,2,0xA3C0);
    tft.fillRect(x*spacing+10,y*spacing+14,2,2,0xA3C0);
  }
}
